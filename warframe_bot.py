import telebot
import requests
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from dateutil import parser as date_parser
import sqlite3
import logging
import json
import os
from flask import Flask
import threading

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    filename='warframe_bot.log',
    filemode='a'
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = 'https://api.warframestat.us/pc?language=ru'
CACHE_TIMEOUT = 120
DATABASE = 'users.db'

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LOCALE = {
    'MENU': ['–°–æ–±—ã—Ç–∏—è üéÆ', '–í—Ç–æ—Ä–∂–µ–Ω–∏—è üåç', '–†–∞–∑—Ä—ã–≤—ã –ë–µ–∑–¥–Ω—ã ‚ö°', '–ë–∞—Ä–æ –ö–∏‚Äô–¢–∏–∏—Ä üöÄ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'],
    'SELECT_SUBSCRIPTION': '–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
    'NOTIFICATIONS_ENABLED': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
    'ERROR': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
    'NO_DATA': '–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
    'SET_TIMEZONE': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
    'SUBSCRIPTIONS': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    'MY_FILTERS': '–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã',
    'CLEAR_FILTERS': '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
    'FISSURE_FILTERS': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑—Ä—ã–≤–æ–≤',
    'FISSURE_TYPES': '–¢–∏–ø –º–∏—Å—Å–∏–∏',
    'FISSURE_TIERS': '–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–ª–æ–º–∞',
    'FISSURE_HARD': '–°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å',
    'FISSURE_STORM': '–ë—É—Ä—è –ë–µ–∑–¥–Ω—ã',
    'BACK': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
}

# –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–∏–ø–æ–≤ –º–∏—Å—Å–∏–π
MISSION_TYPES_TRANSLATION = {
    "Survival": "ü™ì –í—ã–∂–∏–≤–∞–Ω–∏–µ",
    "Interception": "üéØ –ü–µ—Ä–µ—Ö–≤–∞—Ç",
    "Sabotage": "üí£ –î–∏–≤–µ—Ä—Å–∏—è",
    "Mobile Defense": "üõ°Ô∏è –ú–æ–±–∏–ª—å–Ω–∞—è –æ–±–æ—Ä–æ–Ω–∞",
    "Defense": "üß± –û–±–æ—Ä–æ–Ω–∞",
    "Skirmish": "‚öîÔ∏è –°—Ç—ã—á–∫–∞",
    "Exterminate": "‚ò†Ô∏è –ó–∞—á–∏—Å—Ç–∫–∞",
    "Excavation": "‚õè –†–∞—Å–∫–æ–ø–∫–∏",
    "Disruption": "üß® –°–±–æ–π",
    "Void Cascade": "üåÄ –ö–∞—Å–∫–∞–¥ –ë–µ–∑–¥–Ω—ã",
    "Void Flood": "üåä –ü–æ—Ç–æ–ø –ë–µ–∑–¥–Ω—ã",
    "Alchemy": "üß™ –ê–ª—Ö–∏–º–∏—è",
    "Rescue": "üöë –°–ø–∞—Å–µ–Ω–∏–µ",
    "Capture": "üßü –ó–∞—Ö–≤–∞—Ç",
    "Orphix": "ü§ñ –û—Ä—Ñ–∏–∫—Å",
    "Spy": "üïµ –®–ø–∏–æ–Ω–∞–∂",
    "Volatile": "üî´ –ù–∞–ª—ë—Ç"
}

# –£—Ä–æ–≤–Ω–∏ —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã
TIER_TRANSLATION = {
    "Lith": "–õ–∏—Ç",
    "Meso": "–ú–µ–∑–æ",
    "Neo": "–ù–µ–æ",
    "Axi": "–ê–∫—Å–∏",
    "Requiem": "–†–µ–∫–≤–∏–µ–º",
    "Omnia": "–û–º–Ω–∏–∞"
}

TIER_REVERSE_TRANSLATION = {v: k for k, v in TIER_TRANSLATION.items()}

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def validate_api_data(data, key):
    if not data:
        logging.warning(f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API –¥–ª—è {key}")
        return []
    
    result = data.get(key, [])
    if not isinstance(result, (list, dict)):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {key}: {type(result)}")
        return []
    
    return result

def is_data_valid(data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏ –∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã"""
    if not data:
        logging.warning("–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
        
    required_keys = ['events', 'invasions', 'fissures']
    
    for key in required_keys:
        result = data.get(key)
        if not result:
            logging.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞: {key}")
            return False
            
        if not isinstance(result, (list, dict)):
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ {key}: {type(result)}")
            return False
    
    # voidTraders –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    void_traders = data.get('voidTraders', [])
    if void_traders and not isinstance(void_traders, list):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è voidTraders: {type(void_traders)}")
        return False
    
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
logging.basicConfig(level=logging.INFO)

# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                chat_id INTEGER PRIMARY KEY, 
                timezone TEXT DEFAULT 'Europe/Moscow',
                subscriptions TEXT DEFAULT '',
                fissure_filters TEXT DEFAULT '{"types": [], "tiers": [], "hard": false, "storm": false}'
            )
        ''')
        conn.commit()

def check_db_structure():
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("PRAGMA table_info(users)")
        print(c.fetchall())

def get_user(chat_id):
    logging.info(f"[get_user] –ü–æ–ª—É—á–µ–Ω chat_id: {chat_id} (—Ç–∏–ø: {type(chat_id)})")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç Message, –∏–∑–≤–ª–µ–∫–∞–µ–º chat_id
    if isinstance(chat_id, telebot.types.Message):
        chat_id = chat_id.chat.id
    
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
        row = c.fetchone()
        if not row:
            return None
        try:
            fissure_filters = row[3]
            if isinstance(fissure_filters, str):
                try:
                    fissure_filters = json.loads(fissure_filters)
                except json.JSONDecodeError:
                    logging.error(f"–û—à–∏–±–∫–∞ JSON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç")
                    fissure_filters = {
                        "types": [], 
                        "tiers": [], 
                        "hard": False, 
                        "storm": False
                    }
            return {
                'chat_id': row[0],
                'timezone': row[1],
                'subscriptions': row[2].split(',') if row[2] else [],
                'fissure_filters': fissure_filters
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

def save_user(chat_id, data):
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute(
            "REPLACE INTO users VALUES (?,?,?,?)", 
            (
                chat_id, 
                data['timezone'], 
                ','.join(data['subscriptions']), 
                json.dumps(data.get('fissure_filters', {
                    "types": [], 
                    "tiers": [], 
                    "hard": False, 
                    "storm": False
                }))
            )
        )
        conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
CACHE = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
def is_cache_valid():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫—ç—à —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç—ë–∫"""
    return (
        'data' in CACHE and 
        datetime.now() < CACHE.get('expires', datetime.min)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
def get_api_data():
    global CACHE
    if is_cache_valid():
        return CACHE['data']
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        }
        response = requests.get(API_URL, timeout=20, headers=headers)  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        response.raise_for_status()
        data = response.json()
        CACHE.update({
            'data': data,
            'expires': datetime.now() + timedelta(seconds=CACHE_TIMEOUT)
        })
        return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ API: {e}", exc_info=True)
        return {}

def check_api_update():
    try:
        response = requests.head(API_URL, timeout=20)
        last_modified = response.headers.get('Last-Modified')
        if last_modified:
            logging.info(f"API –æ–±–Ω–æ–≤–ª—ë–Ω: {last_modified}")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")

@bot.message_handler(commands=['test_api'])
def test_api(message):
    try:
        response = requests.get(API_URL, timeout=10)
        bot.send_message(message.chat.id, f"–°—Ç–∞—Ç—É—Å: {response.status_code}\n–û—Ç–≤–µ—Ç: {response.text[:200]}...")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
def format_date(timestamp, timezone):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ API –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - ISO-—Å—Ç—Ä–æ–∫–∞ ("2025-05-16T13:00:00.000Z")
    - datetime-–æ–±—ä–µ–∫—Ç
    """
    try:
        tz = pytz.timezone(timezone)
        
        # –ï—Å–ª–∏ timestamp —É–∂–µ –æ–±—ä–µ–∫—Ç datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if isinstance(timestamp, datetime):
            dt = timestamp
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
        elif isinstance(timestamp, str):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã
            if timestamp.endswith('Z'):
                timestamp = timestamp.replace('Z', '+00:00')
            dt = date_parser.isoparse(timestamp)
        else:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(timestamp)}")
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        dt_local = dt.astimezone(tz)
        return dt_local.strftime("%d.%m.%Y %H:%M")
        
    except pytz.UnknownTimeZoneError:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}")
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
        
    except ValueError as ve:
        logging.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã '{timestamp}': {ve}")
        return "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}", exc_info=True)
        return "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"

# –ú–µ–Ω—é
def create_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [telebot.types.KeyboardButton(text) for text in LOCALE['MENU']]
    markup.add(*buttons)
    return markup

@bot.message_handler(func=lambda m: m.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
def settings_menu(message):
    try:
        chat_id = message.chat.id if isinstance(message, telebot.types.Message) else int(message)
        user = get_user(chat_id)
        if not user:
            default_filters = {"types": [], "tiers": [], "hard": False, "storm": False}
            save_user(chat_id, {
                'timezone': 'Europe/Moscow',
                'subscriptions': [],
                'fissure_filters': default_filters
            })
            user = get_user(chat_id)
        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑—Ä—ã–≤–æ–≤
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton(LOCALE['SET_TIMEZONE']))
        markup.add(telebot.types.KeyboardButton(LOCALE['SUBSCRIPTIONS']))
        markup.add(telebot.types.KeyboardButton(LOCALE['MY_FILTERS']))
        markup.add(telebot.types.KeyboardButton(LOCALE['FISSURE_FILTERS']))  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        markup.row(telebot.types.KeyboardButton(LOCALE['BACK']))
        bot.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ settings_menu: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

def create_subscriptions_menu(chat_id):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    user = get_user(chat_id)
    user_subs = user['subscriptions'] if user else []  # ‚úÖ –£–∂–µ —Å–ø–∏—Å–æ–∫

    categories = ['events', 'invasions', 'fissures']
    for cat in categories:
        markup.add(telebot.types.InlineKeyboardButton(
            text=f"{'‚úÖ' if cat in user_subs else '‚ùå'} {cat}",
            callback_data=f"toggle_{cat}"
        ))
    
    return markup

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
def format_rewards(rewards):
    if not rewards:
        return "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"

    reward_items = []
    for reward in rewards:
        item = reward.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        count = reward.get('count', 1)
        reward_items.append(f"{item} x{count}")

    return ', '.join(reward_items)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def check_notifications():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—ã—Ç–∏—è, –≤—Ç–æ—Ä–∂–µ–Ω–∏—è –∏ —Ä–∞–∑—Ä—ã–≤—ã –ë–µ–∑–¥–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    data = get_api_data()
    
    if not is_data_valid(data):
        logging.warning("–ü–æ–ª—É—á–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT chat_id, timezone, subscriptions, fissure_filters FROM users")
        
        for row in c.fetchall():
            try:
                chat_id, tz, subs, filters_str = row
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                try:
                    subscriptions = subs.split(',') if isinstance(subs, str) and subs else []
                except:
                    subscriptions = []
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                try:
                    fissure_filters = json.loads(filters_str) if isinstance(filters_str, str) and filters_str else {
                        "types": [], "tiers": [], "hard": False, "storm": False
                    }
                except json.JSONDecodeError:
                    logging.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è fissure_filters –¥–ª—è {chat_id}")
                    fissure_filters = {
                        "types": [], "tiers": [], "hard": False, "storm": False
                    }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã
                if 'fissures' in subscriptions:
                    fissures = validate_api_data(data, 'fissures')
                    
                    for fissure in fissures:
                        mission_type = fissure.get('missionType')
                        tier = fissure.get('tier')
                        is_hard = fissure.get('isHard', False)
                        is_storm = fissure.get('isStorm', False)
                        eta = fissure.get('eta', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
                        type_ok = not fissure_filters['types'] or mission_type in fissure_filters['types']
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
                        tier_for_check = TIER_REVERSE_TRANSLATION.get(tier, tier)
                        tier_ok = not fissure_filters['tiers'] or tier_for_check in fissure_filters['tiers']
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤
                        hard_ok = not fissure_filters['hard'] or is_hard == fissure_filters['hard']
                        storm_ok = not fissure_filters['storm'] or is_storm == fissure_filters['storm']
                        
                        if type_ok and tier_ok and hard_ok and storm_ok:
                            bot.send_message(chat_id, 
                                f"‚ö° –†–∞–∑—Ä—ã–≤ –ë–µ–∑–¥–Ω—ã: {fissure.get('node', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                                f"–¢–∏–ø: {MISSION_TYPES_TRANSLATION.get(mission_type, mission_type)}\n"
                                f"–£—Ä–æ–≤–µ–Ω—å: {TIER_TRANSLATION.get(tier, tier)}\n"
                                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {eta}",
                                parse_mode='Markdown'
                            )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {chat_id}: {e}", exc_info=True)
                continue

@bot.message_handler(func=lambda m: m.text in LOCALE['MENU'])
def handle_menu(message):
    user_id = message.chat.id
    data = get_api_data()
    
    if not is_data_valid(data):
        bot.send_message(user_id, LOCALE['ERROR'])
        return
    
    if message.text == '–°–æ–±—ã—Ç–∏—è üéÆ':
        events_info(message)
    elif message.text == '–í—Ç–æ—Ä–∂–µ–Ω–∏—è üåç':
        invasions_info(message)
    elif message.text == '–†–∞–∑—Ä—ã–≤—ã –ë–µ–∑–¥–Ω—ã ‚ö°':
        show_fissure_submenu(message)
    elif message.text == '–ë–∞—Ä–æ –ö–∏‚Äô–¢–∏–∏—Ä üöÄ':
        baro_info(message)
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        settings_menu(message)  # –ü–µ—Ä–µ–¥–∞—ë–º message, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º chat_id
    else:
        bot.send_message(user_id, LOCALE['NO_DATA'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    user = get_user(message.chat.id)
    if not user:
        default_filters = {
            "types": [],
            "tiers": [],
            "hard": False,
            "storm": False
        }
        save_user(message.chat.id, {
            'timezone': 'Europe/Moscow',
            'subscriptions': [],
            'fissure_filters': default_filters
        })

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Warframe Helper!",
        reply_markup=create_main_menu()
    )

@bot.message_handler(commands=['refresh'])
def refresh_cache(message):
    global CACHE
    try:
        response = requests.get(API_URL, timeout=20)
        response.raise_for_status()
        CACHE.update({
            'data': response.json(),
            'expires': datetime.now() + timedelta(seconds=CACHE_TIMEOUT)
        })
        bot.send_message(message.chat.id, "–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")

@bot.message_handler(func=lambda m: m.text == '–ë–∞—Ä–æ –ö–∏‚Äô–¢–∏–∏—Ä üöÄ')
def baro_info(message):
    user_id = message.chat.id
    data = get_api_data()
    
    if not is_data_valid(data):
        bot.send_message(user_id, LOCALE['NO_DATA'])
        return
    
    trader = data.get('voidTraders', [{}])[0]
    user = get_user(user_id)
    user_tz = user['timezone'] if user else 'Europe/Moscow'
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
    location = trader.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    activation = trader.get('activation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    expiry = trader.get('expiry', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    start_string = trader.get('startString', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    end_string = trader.get('endString', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    active = trader.get('active', False)
    inventory = trader.get('inventory', [])
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_text = ""
    try:
        if active and expiry != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            formatted_expiry = format_date(expiry, user_tz)
            time_text = f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {formatted_expiry}\n–û—Å—Ç–∞–ª–æ—Å—å: {end_string}"
        
        elif activation != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            formatted_activation = format_date(activation, user_tz)
            time_text = f"–ü—Ä–∏–±—É–¥–µ—Ç: {formatted_activation}\n–î–æ –ø—Ä–∏–±—ã—Ç–∏—è: {start_string}"
        
        else:
            time_text = "–í—Ä–µ–º—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        time_text = f"–î–æ –ø—Ä–∏–±—ã—Ç–∏—è: {start_string}" if not active else f"–û—Å—Ç–∞–ª–æ—Å—å: {end_string}"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    items_text = ""
    if active and inventory and isinstance(inventory, list):
        items_text = "**–¢–æ–≤–∞—Ä—ã:**\n"
        for item in inventory:
            price_parts = []
            if item.get('ducats'):
                price_parts.append(f"{item['ducats']} –¥—É–∫–∞—Ç–æ–≤")
            if item.get('credits'):
                price_parts.append(f"{item['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            items_text += f"- {item.get('item', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({', '.join(price_parts)})\n"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_emoji = "üü¢" if active else "üü†"
    text = f"{status_emoji} **–ë–∞—Ä–æ –ö–∏‚Äô–¢–∏–∏—Ä**\n"
    text += f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
    text += f"{time_text}\n"
    text += items_text.strip()
    
    bot.send_message(user_id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == LOCALE['SUBSCRIPTIONS'])
def subscriptions(message):
    bot.send_message(
        message.chat.id,
        LOCALE['SELECT_SUBSCRIPTION'],
        reply_markup=create_subscriptions_menu(message.chat.id)
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_'))
def toggle_subscription(call):
    try:
        user = get_user(call.message.chat.id)
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        subscriptions = user.get('subscriptions', [])
        category = call.data.split('_')[1]
        
        if category in subscriptions:
            subscriptions.remove(category)
        else:
            subscriptions.append(category)
        
        save_user(call.message.chat.id, {
            'timezone': user['timezone'],
            'subscriptions': subscriptions,
            'fissure_filters': user.get('fissure_filters', {
                "types": [], 
                "tiers": [], 
                "hard": False, 
                "storm": False
            })
        })
        
        bot.answer_callback_query(call.id, LOCALE['NOTIFICATIONS_ENABLED'])
    
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.message_handler(func=lambda m: m.text == '–°–æ–±—ã—Ç–∏—è üéÆ')
def events_info(message):
    user_id = message.chat.id
    data = get_api_data()

    if not is_data_valid(data):
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return

    events = validate_api_data(data, 'events')
    if not events:
        bot.send_message(user_id, LOCALE['NO_DATA'])
        return

    text = "**–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
    for event in events:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        title = event.get('description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º description –≤–º–µ—Å—Ç–æ title
        location = event.get('node', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        expiry = event.get('expiry', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        active = event.get('active', False)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        try:
            expiry_dt = datetime.fromisoformat(expiry.replace('Z', '+00:00'))
            now = datetime.now(pytz.utc)
            eta = str(expiry_dt - now).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        except:
            eta = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
        rewards = event.get('rewards', [])
        reward_text = "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"
        if rewards:
            reward_items = []
            for reward in rewards:
                items = reward.get('items', [])
                if items:
                    reward_items.extend(items)
            if reward_items:
                reward_text = ", ".join(reward_items)

        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if active else "‚è∏ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"

        text += f"‚Ä¢ **{title}**\n"
        text += f"  –õ–æ–∫–∞—Ü–∏—è: {location}\n"
        text += f"  –ù–∞–≥—Ä–∞–¥—ã: {reward_text}\n"
        text += f"  –û—Å—Ç–∞–ª–æ—Å—å: {eta}\n"
        text += f"  –°—Ç–∞—Ç—É—Å: {status}\n\n"

    bot.send_message(user_id, text, parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == '–í—Ç–æ—Ä–∂–µ–Ω–∏—è üåç')
def invasions_info(message):
    user_id = message.chat.id
    data = get_api_data()

    if not is_data_valid(data):
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return

    invasions = validate_api_data(data, 'invasions')
    if not invasions:
        bot.send_message(user_id, LOCALE['NO_DATA'])
        return

    text = "**–¢–µ–∫—É—â–∏–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è:**\n"
    for inv in invasions:
        completed = inv.get('completed', False)
        if completed:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è

        node = inv.get('node', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        attacker = inv.get('attacker', {}).get('faction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        defender = inv.get('defender', {}).get('faction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        eta = inv.get('eta', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∞—Ç–∞–∫—É—é—â–∏—Ö
        attacker_reward = inv.get('attacker', {}).get('reward', {}).get('countedItems', [])
        attacker_reward_text = format_rewards(attacker_reward)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
        defender_reward = inv.get('defender', {}).get('reward', {}).get('countedItems', [])
        defender_reward_text = format_rewards(defender_reward)

        text += f"‚Ä¢ **–õ–æ–∫–∞—Ü–∏—è:** {node}\n"
        text += f"  –ê—Ç–∞–∫—É—é—â–∏–µ: {attacker} | –ó–∞—â–∏—Ç–Ω–∏–∫–∏: {defender}\n"
        text += f"  –°—Ç–∞—Ç—É—Å: ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {eta}\n"
        text += f"  –ù–∞–≥—Ä–∞–¥—ã –∞—Ç–∞–∫—É—é—â–∏—Ö: {attacker_reward_text}\n"
        text += f"  –ù–∞–≥—Ä–∞–¥—ã –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤: {defender_reward_text}\n\n"

    if text == "**–¢–µ–∫—É—â–∏–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è:**\n":
        text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –Ω–µ—Ç"

    bot.send_message(user_id, text, parse_mode='Markdown')

def format_rewards(rewards):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    if not rewards:
        return "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"

    reward_items = []
    for reward in rewards:
        item = reward.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        count = reward.get('count', 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º count –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ 1
        reward_items.append(f"{item} x{count}")

    return ", ".join(reward_items)

@bot.message_handler(func=lambda m: m.text == '–†–∞–∑—Ä—ã–≤—ã –ë–µ–∑–¥–Ω—ã ‚ö°')
def show_fissure_submenu(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å üíé"),
        telebot.types.KeyboardButton("–ë—É—Ä—è –ë–µ–∑–¥–Ω—ã üå™Ô∏è"),
        telebot.types.KeyboardButton("–û–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã üåå")
    )
    markup.row(telebot.types.KeyboardButton(LOCALE['BACK']))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑—Ä—ã–≤–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å üíé", "–ë—É—Ä—è –ë–µ–∑–¥–Ω—ã üå™Ô∏è", "–û–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã üåå"])
def handle_fissure_subcategories(message):
    chat_id = message.chat.id
    data = get_api_data()
    
    if not is_data_valid(data):
        bot.send_message(chat_id, LOCALE['ERROR'])
        return
    
    fissures = validate_api_data(data, 'fissures')
    filtered_fissures = []
    
    if message.text == "–°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å üíé":
        filtered_fissures = [f for f in fissures if f.get('isHard', False)]
    elif message.text == "–ë—É—Ä—è –ë–µ–∑–¥–Ω—ã üå™Ô∏è":
        filtered_fissures = [f for f in fissures if f.get('isStorm', False)]
    elif message.text == "–û–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã üåå":
        filtered_fissures = [f for f in fissures if not f.get('isHard', False) and not f.get('isStorm', False)]
    
    if not filtered_fissures:
        bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    
    text = f"**{message.text}**\n\n"
    for fissure in filtered_fissures:
        node = fissure.get('node', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        mission_type = fissure.get('missionType', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tier = fissure.get('tier', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        eta = fissure.get('eta', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        mission_type_ru = MISSION_TYPES_TRANSLATION.get(mission_type, mission_type)
        tier_ru = TIER_TRANSLATION.get(tier, tier)
        
        text += f"‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {node}\n"
        text += f"  –¢–∏–ø: {mission_type_ru} | –£—Ä–æ–≤–µ–Ω—å: {tier_ru}\n"
        text += f"  –û—Å—Ç–∞–ª–æ—Å—å: {eta}\n\n"
    
    bot.send_message(chat_id, text, parse_mode='Markdown')

# –ù–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑—Ä—ã–≤–æ–≤
def create_fissure_filters_menu(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user = get_user(chat_id)
    if not user:
        return None
    
    try:
        filters = user.get('fissure_filters', {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        })
        if isinstance(filters, str):
            filters = json.loads(filters)
    except json.JSONDecodeError:
        filters = {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    
    # –¢–∏–ø—ã –º–∏—Å—Å–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è callback)
    for key, value in MISSION_TYPES_TRANSLATION.items():
        markup.add(telebot.types.InlineKeyboardButton(
            text=f"{'‚úÖ' if key in filters.get('types', []) else '‚ùå'} {value}",
            callback_data=f"fissure_type_{key}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
        ))
    
    # –£—Ä–æ–≤–Ω–∏ —Ä–∞–∑–ª–æ–º–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è callback)
    for key, value in TIER_TRANSLATION.items():
        markup.add(telebot.types.InlineKeyboardButton(
            text=f"{'‚úÖ' if key in filters.get('tiers', []) else '‚ùå'} {value}",
            callback_data=f"fissure_tier_{key}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
        ))
    
    # –°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å –∏ –ë—É—Ä—è –ë–µ–∑–¥–Ω—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    markup.add(telebot.types.InlineKeyboardButton(
        text=f"{'‚úÖ' if filters.get('hard', False) else '‚ùå'} –°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å üíé",
        callback_data="fissure_hard"
    ))
    
    markup.add(telebot.types.InlineKeyboardButton(
        text=f"{'‚úÖ' if filters.get('storm', False) else '‚ùå'} –ë—É—Ä—è –ë–µ–∑–¥–Ω—ã üå™Ô∏è",
        callback_data="fissure_storm"
    ))
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    markup.add(telebot.types.InlineKeyboardButton(
        text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",
        callback_data="fissure_clear_all"
    ))
    
    markup.add(telebot.types.InlineKeyboardButton(
        text="‚úîÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        callback_data="fissure_filter_save"
    ))
    
    return markup

@bot.message_handler(func=lambda m: m.text == LOCALE['FISSURE_FILTERS'])
def open_fissure_filters(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    bot.send_message(
        chat_id,
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã:",
        reply_markup=create_fissure_filters_menu(chat_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith('fissure_'))
def toggle_fissure_filter(call):
    chat_id = call.message.chat.id
    data_parts = call.data.split('_')
    
    if len(data_parts) < 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    data_type = data_parts[1]
    value = data_parts[2] if len(data_parts) > 2 else ''
    user = get_user(chat_id)
    
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = user.get('fissure_filters', {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        })
        
        if isinstance(filters, str):
            filters = json.loads(filters)
    except json.JSONDecodeError:
        filters = {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
        logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    if data_type == 'type':
        if value in filters['types']:
            filters['types'].remove(value)
        else:
            filters['types'].append(value)
    
    elif data_type == 'tier':
        if value in filters['tiers']:
            filters['tiers'].remove(value)
        else:
            filters['tiers'].append(value)
    
    elif data_type == 'hard':
        filters['hard'] = not filters.get('hard', False)
    
    elif data_type == 'storm':
        filters['storm'] = not filters.get('storm', False)
    
    elif data_type == 'clear' and value == 'all':
        filters = {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
        bot.answer_callback_query(call.id, "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    elif data_type == 'filter' and value == 'save':
        save_user(chat_id, {
            'timezone': user['timezone'],
            'subscriptions': user['subscriptions'],
            'fissure_filters': filters
        })
        
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=chat_id,
            text="‚úÖ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, "–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return
    
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    save_user(chat_id, {
        'timezone': user['timezone'],
        'subscriptions': user['subscriptions'],
        'fissure_filters': filters
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    new_markup = create_fissure_filters_menu(chat_id)
    
    try:
        bot.edit_message_reply_markup(
            message_id=call.message.message_id,
            chat_id=chat_id,
            reply_markup=new_markup
        )
        bot.answer_callback_query(call.id, "–§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            bot.answer_callback_query(call.id, "–§–∏–ª—å—Ç—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logging.warning(f"Telegram API –æ—à–∏–±–∫–∞: {e.result_json.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@bot.message_handler(func=lambda m: m.text == '–†–∞–∑—Ä—ã–≤—ã –ë–µ–∑–¥–Ω—ã ‚ö°')
def show_fissure_settings(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = user.get('fissure_filters', {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        })
        
        if isinstance(filters, str):
            filters = json.loads(filters)
    
    except json.JSONDecodeError:
        filters = {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user['fissure_filters'] = filters
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        bot.send_message(
            chat_id,
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã:",
            reply_markup=create_fissure_filters_menu(chat_id)
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}", exc_info=True)
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤")

@bot.message_handler(commands=['myfilters'])
def show_filters(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = user.get('fissure_filters', {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        })
        
        if isinstance(filters, str):
            filters = json.loads(filters)
    
    except json.JSONDecodeError:
        filters = {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    types = ', '.join(filters.get('types', [])) if filters.get('types') else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    tiers = ', '.join(filters.get('tiers', [])) if filters.get('tiers') else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    hard_status = '–í–ö–õ' if filters.get('hard', False) else '–í–´–ö–õ'
    storm_status = '–í–ö–õ' if filters.get('storm', False) else '–í–´–ö–õ'
    
    bot.send_message(chat_id, f"""
‚öôÔ∏è *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã:*

‚ñ´Ô∏è –¢–∏–ø—ã –º–∏—Å—Å–∏–π: {types}
‚ñ´Ô∏è –£—Ä–æ–≤–Ω–∏ —Ä–∞–∑–ª–æ–º–∞: {tiers}
‚ñ´Ô∏è –°—Ç–∞–ª—å–Ω–æ–π –ü—É—Ç—å: {hard_status}
‚ñ´Ô∏è –ë—É—Ä—è –ë–µ–∑–¥–Ω—ã: {storm_status}
""", parse_mode='Markdown')

@bot.message_handler(func=lambda m: m.text == LOCALE['MY_FILTERS'])
def show_filters_menu(message):
    chat_id = message.chat.id
    show_filters(message)  # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /myfilters

@bot.message_handler(func=lambda m: m.text == LOCALE['MY_FILTERS'])
def show_current_filters(message):
    show_filters(message)

@bot.message_handler(commands=['clearfilters'])
def reset_filters(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    save_user(chat_id, {
        'timezone': user['timezone'],
        'subscriptions': user['subscriptions'],
        'fissure_filters': {
            "types": [], 
            "tiers": [], 
            "hard": False, 
            "storm": False
        }
    })
    
    bot.send_message(chat_id, "üóë –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑—Ä—ã–≤–æ–≤ –ë–µ–∑–¥–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã")

@bot.message_handler(func=lambda m: m.text == LOCALE['BACK'])
def back_to_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: m.text == LOCALE['SET_TIMEZONE'])
def set_timezone(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–∏—Ç–µ —Å–ø–∏—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    europe = [
        "Europe/Moscow (UTC+3)", 
        "Europe/London (UTC+0)", 
        "Europe/Paris (UTC+1)", 
        "Europe/Berlin (UTC+1)", 
        "Europe/Rome (UTC+1)", 
        "Europe/Madrid (UTC+1)"
    ]
    
    north_america = [
        "America/New_York (UTC-4)", 
        "America/Chicago (UTC-5)", 
        "America/Denver (UTC-6)", 
        "America/Los_Angeles (UTC-7)", 
        "America/Phoenix (UTC-7)"
    ]
    
    south_america = [
        "America/Sao_Paulo (UTC-3)", 
        "America/Buenos_Aires (UTC-3)", 
        "America/Lima (UTC-5)"
    ]
    
    asia = [
        "Asia/Tokyo (UTC+9)", 
        "Asia/Shanghai (UTC+8)", 
        "Asia/Dubai (UTC+4)", 
        "Asia/Singapore (UTC+8)", 
        "Asia/Manila (UTC+8)", 
        "Asia/Dhaka (UTC+6)", 
        "Asia/Bangkok (UTC+7)"
    ]
    
    oceania = [
        "Australia/Sydney (UTC+10)", 
        "Australia/Melbourne (UTC+10)", 
        "Pacific/Auckland (UTC+12)", 
        "Pacific/Fiji (UTC+12)"
    ]
    
    africa = [
        "Africa/Cairo (UTC+2)", 
        "Africa/Nairobi (UTC+3)", 
        "Africa/Lagos (UTC+1)", 
        "Africa/Casablanca (UTC+0)"
    ]
    
    # –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω
    all_timezones = europe + north_america + south_america + asia + oceania + africa
    
    # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏
    for tz in all_timezones:
        markup.add(telebot.types.KeyboardButton(tz))
    
    markup.row(telebot.types.KeyboardButton(LOCALE['BACK']))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text.startswith('+') or m.text.startswith('-'))
def custom_timezone(message):
    try:
        offset = int(message.text.split(':')[0])
        tz = pytz.FixedOffset(offset * 60, 'Custom')
        user = get_user(message.chat.id)
        save_user(message.chat.id, {
            'timezone': str(tz),
            'subscriptions': user['subscriptions'],
            'fissure_filters': user.get('fissure_filters', {"types": [], "tiers": [], "hard": False, "storm": False})
        })
        bot.send_message(message.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +HH:MM –∏–ª–∏ -HH:MM")

@bot.message_handler(func=lambda m: "(UTC" in m.text)
def handle_timezone_selection(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ IANA-–Ω–∞–∑–≤–∞–Ω–∏–µ
        timezone = message.text.split(" ")[0]
        user = get_user(message.chat.id)

        if not user:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_user(message.chat.id, {
            'timezone': timezone,
            'subscriptions': user['subscriptions'],
            'fissure_filters': user['fissure_filters']
        })

        bot.send_message(message.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}", reply_markup=create_main_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
scheduler.add_job(check_notifications, 'interval', minutes=5)
scheduler.start()

app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

def run_server():
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
server_thread = threading.Thread(target=run_server)
server_thread.daemon = True
server_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()